name: Sync Env

on:
  pull_request:
    branches: ["development"]
    types: [synchronize]

jobs:
  # In this job we check if the EC2 instance exists, if it does we set the output execute to true
  check-instance:
    if: ${{ !github.event.pull_request.draft }}
    runs-on: ubuntu-latest
    outputs:
      execute: ${{ steps.check_ec2_instance.outputs.execute }}
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} # We get the access key from the secrets (configured on github repo)
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # We get the access secret key from the secrets (configured on github repo)
          aws-region: [REGION] # You can use the github variables/secrets to get the aws region from the repository or just hardcode it

      - name: Check if EC2 instance exists
        id: check_ec2_instance  # The id is used to get the output of this step (should be the same of outputs key of this job)
        run: |
          INSTANCE_NAME="PR-${{ github.event.pull_request.number }}"
          INSTANCE_ID=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=$INSTANCE_NAME" "Name=instance-state-name,Values=running" --query 'Reservations[*].Instances[*].InstanceId' --output text)
          if [ -n "$INSTANCE_ID" ]; then
            echo "::set-output name=execute::true"
          else
            echo "* * * Instance does not exist"
            echo "::set-output name=execute::false"
          fi
  # In this job we just add the label "Building..." to the PR
  label-pr:
    runs-on: ubuntu-latest
    needs: check-instance
    if: needs.check-instance.outputs.execute == 'true'
    steps:
      - name: Remove All Labels
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          REPO=${{ github.repository }}
          curl -X DELETE \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/$REPO/issues/$PR_NUMBER/labels

      - name: Add "Building..." label via GitHub API
        run: |
          curl -s -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/labels \
            -d '{"labels":["Building..."]}'
        
  # In this job we run the CI for the frontend
  ci-frontend:
    needs: check-instance
    if: needs.check-instance.outputs.execute == 'true'
    uses: ./.github/workflows/ci-frontend.yml
    secrets:
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
    with:
      IMAGE_TAG: "${{ github.event.pull_request.number }}"

  # In this job we run the CI for the backend
  ci-backend:
    needs: check-instance
    if: needs.check-instance.outputs.execute == 'true'
    uses: ./.github/workflows/ci-backend.yml
    secrets:
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
    with:
      IMAGE_TAG: "${{ github.event.pull_request.number }}"
  
  # In this job we update the instance with the new images
  update-instance:
    runs-on: ubuntu-latest
    needs: [ci-frontend, ci-backend, check-instance]
    if: needs.check-instance.outputs.execute == 'true'
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} # configured on github repo
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # configured on github repo
          aws-region: [REGION] # You can use the github variables/secrets to get the aws region from the repository or just hardcode it
      
      # In this step we remove all labels from the PR 
      - name: Remove All Labels
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          REPO=${{ github.repository }}
          curl -X DELETE \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/$REPO/issues/$PR_NUMBER/labels
      
      # In this step we add the label "Updating environment..." to the PR
      - name: Add "Updating environment..." label via GitHub API
        run: |
          curl -s -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/labels \
            -d '{"labels":["Updating environment..."]}'
      # In this step we call the workflow to update the environment
      - name: Acessar a instÃ¢ncia via SSH
        env:
          REF_NAME_SLUG: ${{ env.GT_GITHUB_REF_NAME_SLUG}}
          SHA: ${{ env.GT_GITHUB_SHA_SHORT }}
        run: |
          # Create the key.pem file with the content of the secret AWS_PEM_FILE_CONTENT
          echo "${{ secrets.AWS_PEM_FILE_CONTENT }}" > key.pem
          chmod 400 key.pem

          printf "* * * Accessing the instance throgh SSH"
          # Running script throgh SSH
          ssh -o StrictHostKeyChecking=no -i "key.pem" ubuntu@pr${{ github.event.pull_request.number }}.YOUR.DOMAIN << 'ENDSSH'
          
          cd /home/ubuntu/[YOUR-PROJECT-FOLDER]
          git reset --hard origin/$BRANCH_NAME

          DOCKER_REPO="[ACCOUNT].dkr.ecr.[REGION].amazonaws.com/[REPOSITORY]"
          DEFAULT_DOMAIN="pr${{ github.event.pull_request.number }}.YOUR.DOMAIN"
          REF_NAME="${{ env.GT_GITHUB_REF_NAME }}"
          DOCKER_IMAGE_TAG="${{ github.event.pull_request.number }}"
          DB_IMAGE="[ACCOUNT].dkr.ecr.[REGION].amazonaws.com/[REPOSITORY]/db:latest"

          printf "* * * Login into AWS ECR"
          # Here we make login into AWS ECR to get the docker image
          export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} && aws ecr get-login-password --region [REGION] | docker login --username AWS --password-stdin [ACCOUNT].dkr.ecr.[REGION].amazonaws.com
          
          printf "* * * Starting deploy"

          # Here I export some environment variables to use in the deploy
          # In my case, I'm using a Makefile to deploy the project, this is a personal choice
          # In this case, I have a commando to deploy and run a script to clean and populate again the database
          # with specific data to run end-to-end tests
          export DOCKER_REPO=$DOCKER_REPO REF_NAME=$REF_NAME DOCKER_IMAGE_TAG=$DOCKER_IMAGE_TAG DEFAULT_DOMAIN=$DEFAULT_DOMAIN && make deploy_cleanup
          
          ENDSSH

      # In this step we remove all labels from the PR 
      - name: Remove All Labels
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          REPO=${{ github.repository }}
          curl -X DELETE \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/$REPO/issues/$PR_NUMBER/labels

      # In this step we add the label "ON-LINE" to the PR
      - name: Add "ON-LINE" label via GitHub API
        run: |
          curl -s -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/labels \
            -d '{"labels":["ON-LINE"]}'

      # This step will run only if the previous steps fail
      # adding lavel "ERROR to set new environment" on PR
      - name: Add Label on Failure
        if: failure()  # this will run only if the previous step fails
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Job fail! status: ${{ job.status }}"
          PR_NUMBER=${{ github.event.pull_request.number }}
          REPO=${{ github.repository }}
          LABEL="ERROR to update environment"

          curl -X DELETE \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/$REPO/issues/$PR_NUMBER/labels

          # Chamada para adicionar o label ao PR
          curl -X POST \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            -d "{\"labels\":[\"$LABEL\"]}" \
            https://api.github.com/repos/$REPO/issues/$PR_NUMBER/labels

  # This job will run my end-to-end tests
  test-e2e-experimental:
    permissions:
        contents: read
    uses: ./.github/workflows/test-e2e.yml
    needs: [update-instance]
    secrets:
      DEFAULT_DOMAIN: pr${{ github.event.pull_request.number }}.YOUR.DOMAIN
